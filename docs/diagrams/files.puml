@startuml
hide circle
skinparam linetype ortho

actor user
participant api
participant jobs
database db <<postgres>>
database artifacts as s3 <<S3>>
queue commands <<AMQ>>
queue events <<AMQ>>

== Upload Artifact (mp3) ==

user -> api: [HTTP] upload song.mp3

activate api
    api -> s3: [S3] store blob
    s3 -> api: [S3] blob stored
    api -> commands: [AMQ] :workflow/create!
    api -> user: [HTTP] 204
deactivate api

commands -> jobs: [AMQ] :workflow/create!

activate jobs
    group tx
        jobs -> db: [SQL] INSERT INTO workflows
        db -> jobs: [SQL] ResultSet<workflow-id>
    end

    jobs -> commands: [AMQ] :artifact/create!
deactivate jobs

commands -> jobs: [AMQ] :artifact/create!

activate jobs
    group tx
        jobs -> db: [SQL] INSERT INTO artifacts
        db -> jobs: [SQL] ResultSet<artifact-id>
        jobs -> db: [SQL] SELECT FROM artifacts
        db -> jobs: [SQL] ResultSet<event-data>
    end

    jobs -> commands: [AMQ] :workflow/next!
deactivate jobs

commands -> jobs: [AMQ] :workflow/next!

activate jobs
    group tx
        jobs -> db: [SQL] UPDATE workflows
        db -> jobs: [SQL] ResultSet
    end

    jobs -> events: [AMQ] :workflow/completed
deactivate jobs

events -> jobs: [AMQ] :workflow/completed

activate jobs
    group tx
        jobs -> db: [SQL] INSERT INTO events
        db -> jobs: [SQL] ResultSet<event-id>
    end
deactivate jobs

events -> api: [AMQ] :workflow/completed
api -> user: [WS] workflow completed

== Create File (project track) ==

user -> api: [HTTP] create file

activate api
    api -> commands: [AMQ] :workflow/create!
    api -> user: [HTTP] 204
deactivate api

commands -> jobs: [AMQ] :workflow/create!

activate jobs
    group tx
        jobs -> db: [SQL] INSERT INTO workflows
        db -> jobs: [SQL] ResultSet<workflow-id>
    end

    jobs -> commands: [AMQ] :file/create!
deactivate jobs

commands -> jobs: [AMQ] :file/create!

activate jobs
    group tx
        jobs -> db: [SQL] access? files
        jobs -> db: [SQL] ResultSet<access-ok>
        jobs -> db: [SQL] INSERT INTO files
        db -> jobs: [SQL] ResultSet<file-id>
    end

    jobs -> commands: [AMQ] :workflow/next!
deactivate jobs

commands -> jobs: [AMQ] :workflow/next!

activate jobs
    group tx
        jobs -> db: [SQL] UPDATE workflows
        db -> jobs: [SQL] ResultSet
    end

    jobs -> commands: [AMQ] :file-version/create!
deactivate jobs

commands -> jobs: [AMQ] :file-version/create!

activate jobs
    group tx
        jobs -> db: [SQL] INSERT INTO file_versions
        db -> jobs: [SQL] ResultSet<file-version-id>
        jobs -> db: [SQL] SELECT FROM files
        db -> jobs: [SQL] ResultSet<event-data>
    end

    jobs -> commands: [AMQ] :workflow/next!
deactivate jobs

commands -> jobs: [AMQ] :workflow/next!

activate jobs
    group tx
        jobs -> db: [SQL] UPDATE workflows
        db -> jobs: [SQL] ResultSet
    end

    jobs -> events: [AMQ] :workflow/completed
deactivate jobs

events -> jobs: [AMQ] :workflow/completed

activate jobs
    group tx
        jobs -> db: [SQL] INSERT INTO events
        db -> jobs: [SQL] ResultSet<event-id>
    end
deactivate jobs

events -> api: [AMQ] :workflow/completed
api -> user: [WS] workflow completed

@enduml
